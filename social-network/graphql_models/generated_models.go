// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_models

type BooleanFilter struct {
	IsTrue  *bool `json:"isTrue"`
	IsFalse *bool `json:"isFalse"`
	IsNull  *bool `json:"isNull"`
}

type Comment struct {
	ID           string         `json:"id"`
	Content      string         `json:"content"`
	Post         *Post          `json:"post"`
	User         *User          `json:"user"`
	CommentLikes []*CommentLike `json:"commentLikes"`
}

type CommentCreateInput struct {
	Content string `json:"content"`
	PostID  string `json:"postId"`
}

type CommentDeletePayload struct {
	ID string `json:"id"`
}

type CommentFilter struct {
	Search *string       `json:"search"`
	Where  *CommentWhere `json:"where"`
}

type CommentLike struct {
	ID        string   `json:"id"`
	Comment   *Comment `json:"comment"`
	User      *User    `json:"user"`
	LikeType  string   `json:"likeType"`
	CreatedAt *int     `json:"createdAt"`
}

type CommentLikeCreateInput struct {
	CommentID string `json:"commentId"`
	LikeType  string `json:"likeType"`
	CreatedAt *int   `json:"createdAt"`
}

type CommentLikeDeletePayload struct {
	ID string `json:"id"`
}

type CommentLikeFilter struct {
	Search *string           `json:"search"`
	Where  *CommentLikeWhere `json:"where"`
}

type CommentLikePayload struct {
	CommentLike *CommentLike `json:"commentLike"`
}

type CommentLikeUpdateInput struct {
	CommentID *string `json:"commentId"`
	LikeType  *string `json:"likeType"`
	CreatedAt *int    `json:"createdAt"`
}

type CommentLikeWhere struct {
	ID        *IDFilter         `json:"id"`
	Comment   *CommentWhere     `json:"comment"`
	User      *UserWhere        `json:"user"`
	LikeType  *StringFilter     `json:"likeType"`
	CreatedAt *IntFilter        `json:"createdAt"`
	Or        *CommentLikeWhere `json:"or"`
	And       *CommentLikeWhere `json:"and"`
}

type CommentLikesCreateInput struct {
	CommentLikes []*CommentLikeCreateInput `json:"commentLikes"`
}

type CommentLikesDeletePayload struct {
	Ids []string `json:"ids"`
}

type CommentLikesPayload struct {
	CommentLikes []*CommentLike `json:"commentLikes"`
}

type CommentLikesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type CommentPayload struct {
	Comment *Comment `json:"comment"`
}

type CommentUpdateInput struct {
	Content *string `json:"content"`
	PostID  *string `json:"postId"`
}

type CommentWhere struct {
	ID           *IDFilter         `json:"id"`
	Content      *StringFilter     `json:"content"`
	Post         *PostWhere        `json:"post"`
	User         *UserWhere        `json:"user"`
	CommentLikes *CommentLikeWhere `json:"commentLikes"`
	Or           *CommentWhere     `json:"or"`
	And          *CommentWhere     `json:"and"`
}

type CommentsCreateInput struct {
	Comments []*CommentCreateInput `json:"comments"`
}

type CommentsDeletePayload struct {
	Ids []string `json:"ids"`
}

type CommentsPayload struct {
	Comments []*Comment `json:"comments"`
}

type CommentsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type FloatFilter struct {
	EqualTo           *float64  `json:"equalTo"`
	NotEqualTo        *float64  `json:"notEqualTo"`
	LessThan          *float64  `json:"lessThan"`
	LessThanOrEqualTo *float64  `json:"lessThanOrEqualTo"`
	MoreThan          *float64  `json:"moreThan"`
	MoreThanOrEqualTo *float64  `json:"moreThanOrEqualTo"`
	In                []float64 `json:"in"`
	NotIn             []float64 `json:"notIn"`
}

type Friendship struct {
	ID        string  `json:"id"`
	CreatedAt *int    `json:"createdAt"`
	Users     []*User `json:"users"`
}

type FriendshipCreateInput struct {
	CreatedAt *int `json:"createdAt"`
}

type FriendshipDeletePayload struct {
	ID string `json:"id"`
}

type FriendshipFilter struct {
	Search *string          `json:"search"`
	Where  *FriendshipWhere `json:"where"`
}

type FriendshipPayload struct {
	Friendship *Friendship `json:"friendship"`
}

type FriendshipUpdateInput struct {
	CreatedAt *int `json:"createdAt"`
}

type FriendshipWhere struct {
	ID        *IDFilter        `json:"id"`
	CreatedAt *IntFilter       `json:"createdAt"`
	Users     *UserWhere       `json:"users"`
	Or        *FriendshipWhere `json:"or"`
	And       *FriendshipWhere `json:"and"`
}

type FriendshipsCreateInput struct {
	Friendships []*FriendshipCreateInput `json:"friendships"`
}

type FriendshipsDeletePayload struct {
	Ids []string `json:"ids"`
}

type FriendshipsPayload struct {
	Friendships []*Friendship `json:"friendships"`
}

type FriendshipsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type IDFilter struct {
	EqualTo    *string  `json:"equalTo"`
	NotEqualTo *string  `json:"notEqualTo"`
	In         []string `json:"in"`
	NotIn      []string `json:"notIn"`
}

type Image struct {
	ID              string            `json:"id"`
	Post            *Post             `json:"post"`
	Views           *int              `json:"views"`
	OriginalURL     *string           `json:"originalUrl"`
	ImageVariations []*ImageVariation `json:"imageVariations"`
}

type ImageCreateInput struct {
	PostID      string  `json:"postId"`
	Views       *int    `json:"views"`
	OriginalURL *string `json:"originalUrl"`
}

type ImageDeletePayload struct {
	ID string `json:"id"`
}

type ImageFilter struct {
	Search *string     `json:"search"`
	Where  *ImageWhere `json:"where"`
}

type ImagePayload struct {
	Image *Image `json:"image"`
}

type ImageUpdateInput struct {
	PostID      *string `json:"postId"`
	Views       *int    `json:"views"`
	OriginalURL *string `json:"originalUrl"`
}

type ImageVariation struct {
	ID    string `json:"id"`
	Image *Image `json:"image"`
}

type ImageVariationCreateInput struct {
	ImageID string `json:"imageId"`
}

type ImageVariationDeletePayload struct {
	ID string `json:"id"`
}

type ImageVariationFilter struct {
	Search *string              `json:"search"`
	Where  *ImageVariationWhere `json:"where"`
}

type ImageVariationPayload struct {
	ImageVariation *ImageVariation `json:"imageVariation"`
}

type ImageVariationUpdateInput struct {
	ImageID *string `json:"imageId"`
}

type ImageVariationWhere struct {
	ID    *IDFilter            `json:"id"`
	Image *ImageWhere          `json:"image"`
	Or    *ImageVariationWhere `json:"or"`
	And   *ImageVariationWhere `json:"and"`
}

type ImageVariationsCreateInput struct {
	ImageVariations []*ImageVariationCreateInput `json:"imageVariations"`
}

type ImageVariationsDeletePayload struct {
	Ids []string `json:"ids"`
}

type ImageVariationsPayload struct {
	ImageVariations []*ImageVariation `json:"imageVariations"`
}

type ImageVariationsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type ImageWhere struct {
	ID              *IDFilter            `json:"id"`
	Post            *PostWhere           `json:"post"`
	Views           *IntFilter           `json:"views"`
	OriginalURL     *StringFilter        `json:"originalUrl"`
	ImageVariations *ImageVariationWhere `json:"imageVariations"`
	Or              *ImageWhere          `json:"or"`
	And             *ImageWhere          `json:"and"`
}

type ImagesCreateInput struct {
	Images []*ImageCreateInput `json:"images"`
}

type ImagesDeletePayload struct {
	Ids []string `json:"ids"`
}

type ImagesPayload struct {
	Images []*Image `json:"images"`
}

type ImagesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type IntFilter struct {
	EqualTo           *int  `json:"equalTo"`
	NotEqualTo        *int  `json:"notEqualTo"`
	LessThan          *int  `json:"lessThan"`
	LessThanOrEqualTo *int  `json:"lessThanOrEqualTo"`
	MoreThan          *int  `json:"moreThan"`
	MoreThanOrEqualTo *int  `json:"moreThanOrEqualTo"`
	In                []int `json:"in"`
	NotIn             []int `json:"notIn"`
}

type Like struct {
	ID        string `json:"id"`
	Post      *Post  `json:"post"`
	User      *User  `json:"user"`
	LikeType  string `json:"likeType"`
	CreatedAt *int   `json:"createdAt"`
}

type LikeCreateInput struct {
	PostID    string `json:"postId"`
	LikeType  string `json:"likeType"`
	CreatedAt *int   `json:"createdAt"`
}

type LikeDeletePayload struct {
	ID string `json:"id"`
}

type LikeFilter struct {
	Search *string    `json:"search"`
	Where  *LikeWhere `json:"where"`
}

type LikePayload struct {
	Like *Like `json:"like"`
}

type LikeUpdateInput struct {
	PostID    *string `json:"postId"`
	LikeType  *string `json:"likeType"`
	CreatedAt *int    `json:"createdAt"`
}

type LikeWhere struct {
	ID        *IDFilter     `json:"id"`
	Post      *PostWhere    `json:"post"`
	User      *UserWhere    `json:"user"`
	LikeType  *StringFilter `json:"likeType"`
	CreatedAt *IntFilter    `json:"createdAt"`
	Or        *LikeWhere    `json:"or"`
	And       *LikeWhere    `json:"and"`
}

type LikesCreateInput struct {
	Likes []*LikeCreateInput `json:"likes"`
}

type LikesDeletePayload struct {
	Ids []string `json:"ids"`
}

type LikesPayload struct {
	Likes []*Like `json:"likes"`
}

type LikesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type Post struct {
	ID       string     `json:"id"`
	Content  string     `json:"content"`
	User     *User      `json:"user"`
	Comments []*Comment `json:"comments"`
	Images   []*Image   `json:"images"`
	Likes    []*Like    `json:"likes"`
}

type PostCreateInput struct {
	Content string `json:"content"`
}

type PostDeletePayload struct {
	ID string `json:"id"`
}

type PostFilter struct {
	Search *string    `json:"search"`
	Where  *PostWhere `json:"where"`
}

type PostPayload struct {
	Post *Post `json:"post"`
}

type PostUpdateInput struct {
	Content *string `json:"content"`
}

type PostWhere struct {
	ID       *IDFilter     `json:"id"`
	Content  *StringFilter `json:"content"`
	User     *UserWhere    `json:"user"`
	Comments *CommentWhere `json:"comments"`
	Images   *ImageWhere   `json:"images"`
	Likes    *LikeWhere    `json:"likes"`
	Or       *PostWhere    `json:"or"`
	And      *PostWhere    `json:"and"`
}

type PostsCreateInput struct {
	Posts []*PostCreateInput `json:"posts"`
}

type PostsDeletePayload struct {
	Ids []string `json:"ids"`
}

type PostsPayload struct {
	Posts []*Post `json:"posts"`
}

type PostsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type StringFilter struct {
	EqualTo            *string  `json:"equalTo"`
	NotEqualTo         *string  `json:"notEqualTo"`
	In                 []string `json:"in"`
	NotIn              []string `json:"notIn"`
	StartWith          *string  `json:"startWith"`
	NotStartWith       *string  `json:"notStartWith"`
	EndWith            *string  `json:"endWith"`
	NotEndWith         *string  `json:"notEndWith"`
	Contain            *string  `json:"contain"`
	NotContain         *string  `json:"notContain"`
	StartWithStrict    *string  `json:"startWithStrict"`
	NotStartWithStrict *string  `json:"notStartWithStrict"`
	EndWithStrict      *string  `json:"endWithStrict"`
	NotEndWithStrict   *string  `json:"notEndWithStrict"`
	ContainStrict      *string  `json:"containStrict"`
	NotContainStrict   *string  `json:"notContainStrict"`
}

type User struct {
	ID           string         `json:"id"`
	FirstName    string         `json:"firstName"`
	LastName     string         `json:"lastName"`
	Email        string         `json:"email"`
	Comments     []*Comment     `json:"comments"`
	CommentLikes []*CommentLike `json:"commentLikes"`
	Likes        []*Like        `json:"likes"`
	Posts        []*Post        `json:"posts"`
	Friendships  []*Friendship  `json:"friendships"`
}

type UserCreateInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type UserDeletePayload struct {
	ID string `json:"id"`
}

type UserFilter struct {
	Search *string    `json:"search"`
	Where  *UserWhere `json:"where"`
}

type UserPayload struct {
	User *User `json:"user"`
}

type UserUpdateInput struct {
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
	Email     *string `json:"email"`
}

type UserWhere struct {
	ID           *IDFilter         `json:"id"`
	FirstName    *StringFilter     `json:"firstName"`
	LastName     *StringFilter     `json:"lastName"`
	Email        *StringFilter     `json:"email"`
	Comments     *CommentWhere     `json:"comments"`
	CommentLikes *CommentLikeWhere `json:"commentLikes"`
	Likes        *LikeWhere        `json:"likes"`
	Posts        *PostWhere        `json:"posts"`
	Friendships  *FriendshipWhere  `json:"friendships"`
	Or           *UserWhere        `json:"or"`
	And          *UserWhere        `json:"and"`
}

type UsersCreateInput struct {
	Users []*UserCreateInput `json:"users"`
}

type UsersDeletePayload struct {
	Ids []string `json:"ids"`
}

type UsersPayload struct {
	Users []*User `json:"users"`
}

type UsersUpdatePayload struct {
	Ok bool `json:"ok"`
}
